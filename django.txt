

=== Filename: ./django\Dockerfile Start ===

# Use an official Python runtime as a parent image
FROM python:3.10-slim
# Set environment varibles
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
# Set work directory
WORKDIR /app
# Copy requirements.txt first to leverage Docker cache
COPY requirements.txt /app/
# Install dependencies
RUN pip install --no-cache-dir -r requirements.txt
# Copy the rest of the application
COPY . /app/

=== Filename: ./django\Dockerfile End ===



=== Filename: ./django\init_database.py Start ===

from dotenv import load_dotenv
load_dotenv()  # This loads the environment variables from `.env`.
import os
import psycopg2
from psycopg2 import sql
def create_user_and_database(db_config, username, password, database_name, dryrun=True):
    """Create a new PostgreSQL user and a database, then set the user as the owner."""
    conn = None
    try:
        # Connect to the PostgreSQL database server
        conn = psycopg2.connect(**db_config)
        conn.autocommit = True  # Enable autocommit to allow database creation
        # Create a new cursor
        cur = conn.cursor()
        if not dryrun:
            # Create user command
            cur.execute(sql.SQL("CREATE USER {} WITH PASSWORD %s;").format(
                sql.Identifier(username)), [password])
            # Grant privileges (optional, adjust as needed)
            cur.execute(sql.SQL("ALTER USER {} WITH CREATEDB;").format(
                sql.Identifier(username)))
            # Create database command
            cur.execute(sql.SQL("CREATE DATABASE {} OWNER {};").format(
                sql.Identifier(database_name), sql.Identifier(username)))
        # Close communication with the PostgreSQL database
        cur.close()
    except (Exception, psycopg2.DatabaseError) as error:
        print(error)
    finally:
        if conn is not None:
            conn.close()
if __name__ == '__main__':
    db_config = {
        'dbname': 'postgres',
        'user': 'postgres',
        'password': os.getenv('DATABASE_SUPER_PASSWORD'),
        'host': 'localhost'
    }
    username = os.getenv('DATABASE_USER')
    password = os.getenv('DATABASE_PASSWORD')
    database_name = os.getenv('DATABASE_NAME', 'my_project_db')  # Default to 'my_project_db' if not set in .env
    create_user_and_database(db_config, username, password, database_name, dryrun=False)


=== Filename: ./django\init_database.py End ===



=== Filename: ./django\manage.py Start ===

#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys
def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hai_server.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)
if __name__ == '__main__':
    main()


=== Filename: ./django\manage.py End ===



=== Filename: ./django\hai_server\asgi.py Start ===

"""
ASGI config for hai_server project.
It exposes the ASGI callable as a module-level variable named ``application``.
For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/asgi/
"""
import os
from django.core.asgi import get_asgi_application
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hai_server.settings')
application = get_asgi_application()


=== Filename: ./django\hai_server\asgi.py End ===



=== Filename: ./django\hai_server\settings.py Start ===

"""
Django settings for hai_server project.
Generated by 'django-admin startproject' using Django 5.0.6.
For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv
load_dotenv()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-y-9z@s$#qzhkz-+yp&+scmpe-dam=9%&2bu%am+khv*c_20b%5'
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ALLOWED_HOSTS = []
# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'users',  # Add this line
]
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
ROOT_URLCONF = 'hai_server.urls'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
WSGI_APPLICATION = 'hai_server.wsgi.application'
# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DATABASE_NAME'),
        'USER': os.getenv('DATABASE_USER'),
        'PASSWORD': os.getenv('DATABASE_PASSWORD'),
        'HOST': os.getenv('DATABASE_HOST', 'localhost'),
        'PORT': os.getenv('DATABASE_PORT', 5432),
    }
}
# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
STATIC_URL = 'static/'
# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


=== Filename: ./django\hai_server\settings.py End ===



=== Filename: ./django\hai_server\urls.py Start ===

"""
URL configuration for hai_server project.
The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path
urlpatterns = [
    path('admin/', admin.site.urls),
]


=== Filename: ./django\hai_server\urls.py End ===



=== Filename: ./django\hai_server\wsgi.py Start ===

"""
WSGI config for hai_server project.
It exposes the WSGI callable as a module-level variable named ``application``.
For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/
"""
import os
from django.core.wsgi import get_wsgi_application
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hai_server.settings')
application = get_wsgi_application()


=== Filename: ./django\hai_server\wsgi.py End ===



=== Filename: ./django\hai_server\__init__.py Start ===



=== Filename: ./django\hai_server\__init__.py End ===



=== Filename: ./django\users\admin.py Start ===

from django.contrib import admin
# Register your models here.


=== Filename: ./django\users\admin.py End ===



=== Filename: ./django\users\apps.py Start ===

from django.apps import AppConfig
class CustomersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'customers'


=== Filename: ./django\users\apps.py End ===



=== Filename: ./django\users\models.py Start ===

from django.db import models
from django.contrib.auth.models import AbstractUser
class Customer(AbstractUser):
    is_manager = models.BooleanField(default=False)
    name = models.CharField(max_length=255)
    email = models.EmailField(unique=True)
    phone = models.CharField(max_length=15, blank=True, null=True)
    address = models.TextField(blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    def __str__(self):
        return self.name


=== Filename: ./django\users\models.py End ===



=== Filename: ./django\users\serializers.py Start ===

from rest_framework import serializers
from .models import Customer
class CustomerSerializer(serializers.ModelSerializer):
    class Meta:
        model = Customer
        fields = '__all__'


=== Filename: ./django\users\serializers.py End ===



=== Filename: ./django\users\tests.py Start ===

from django.test import TestCase
# Create your tests here.


=== Filename: ./django\users\tests.py End ===



=== Filename: ./django\users\urls.py Start ===

from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import CustomerViewSet
router = DefaultRouter()
router.register(r'customers', CustomerViewSet)
urlpatterns = [
    path('', include(router.urls)),
]


=== Filename: ./django\users\urls.py End ===



=== Filename: ./django\users\views.py Start ===

from rest_framework import viewsets
from .models import Customer
from .serializers import CustomerSerializer
class CustomerViewSet(viewsets.ModelViewSet):
    queryset = Customer.objects.all()
    serializer_class = CustomerSerializer


=== Filename: ./django\users\views.py End ===



=== Filename: ./django\users\__init__.py Start ===



=== Filename: ./django\users\__init__.py End ===



=== Filename: ./django\users\migrations\0001_initial.py Start ===

# Generated by Django 5.0.6 on 2024-05-24 09:31
from django.db import migrations, models
class Migration(migrations.Migration):
    initial = True
    dependencies = [
    ]
    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
    ]


=== Filename: ./django\users\migrations\0001_initial.py End ===



=== Filename: ./django\users\migrations\__init__.py Start ===



=== Filename: ./django\users\migrations\__init__.py End ===

